import React from 'react'; import { Card } from './ui/Card'; import { Task } from '../types'; import { clsx } from 'clsx'; interface TaskCardProps { task: Task; onComplete?: (taskId: string) => void; onEdit?: (taskId: string) => void; onDelete?: (taskId: string) => void; isLoading?: boolean; } export const TaskCard: React.FC<TaskCardProps> = ({ task, onComplete, onEdit, onDelete, isLoading = false }) => { const getPriorityColor = (priority: string) => { switch (priority) { case 'low': return 'bg-green-100 text-green-800'; case 'medium': return 'bg-yellow-100 text-yellow-800'; case 'high': return 'bg-orange-100 text-orange-800'; case 'urgent': return 'bg-red-100 text-red-800'; default: return 'bg-gray-100 text-gray-800'; } }; const getPriorityLabel = (priority: string) => { switch (priority) { case 'low': return 'Baja'; case 'medium': return 'Medium'; case 'high': return 'Alta'; case 'urgent': return 'Urgente'; default: return priority; } }; const getStatusColor = (status: string) => { switch (status) { case 'pending': return 'bg-gray-100 text-gray-800'; case 'in_progress': return 'bg-blue-100 text-blue-800'; case 'completed': return 'bg-green-100 text-green-800'; case 'cancelled': return 'bg-red-100 text-red-800'; default: return 'bg-gray-100 text-gray-800'; } }; const getStatusLabel = (status: string) => { switch (status) { case 'pending': return 'Pendiente'; case 'in_progress': return 'En Progreso'; case 'completed': return 'Completada'; case 'cancelled': return 'Cancelada'; default: return status; } }; return ( <Card className={clsx( 'transition-all duration-200', isLoading && 'opacity-50 pointer-events-none' )} variant="outlined" hover={true} > <div className="p-4"> {/* Header with title and status badges */} <div className="flex items-start justify-between mb-3"> <h3 className="text-lg font-semibold text-gray-900 truncate flex-1 mr-2"> {task.title} </h3> <div className="flex flex-col items-end gap-1"> {task.isOverdue && !task.isCompleted && ( <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800"> Atrasada </span> )} {task.isCompleted && ( <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800"> Completada </span> )} </div> </div> {/* Description */} {task.description && ( <p className="text-gray-600 text-sm mb-3 line-clamp-2"> {task.description} </p> )} {/* Priority and Status badges */} <div className="flex flex-wrap gap-2 mb-3"> <span className={clsx( 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium', getPriorityColor(task.priority) )}> {getPriorityLabel(task.priority)} </span> {!task.isCompleted && ( <span className={clsx( 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium', getStatusColor(task.status) )}> {getStatusLabel(task.status)} </span> )} {task.category && ( <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white" style={{ backgroundColor: task.category.color }} > {task.category.name} </span> )} </div> {/* Assigned user */} {task.assignedToUser && ( <div className="flex items-center text-sm text-gray-600 mb-3"> <span className="font-medium">Asignado a:</span> <span className="ml-1"> {`${task.assignedToUser.firstName} ${task.assignedToUser.lastName}`} </span> </div> )} {/* Due date */} {task.dueDate && ( <div className="flex items-center text-sm text-gray-600 mb-3"> <span className="font-medium">Fecha l√≠mite:</span> <span className="ml-1"> {new Date(task.dueDate).toLocaleDateString('es-ES')} </span> </div> )} {/* Action buttons */} <div className="flex justify-end gap-2 pt-2 border-t border-gray-200"> {onEdit && ( <button onClick={() => onEdit(task.id)} disabled={isLoading} className="px-3 py-1 text-sm text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded transition-colors" > Editar </button> )} {onComplete && !task.isCompleted && ( <button onClick={() => onComplete(task.id)} disabled={isLoading} className="px-3 py-1 text-sm text-green-600 hover:text-green-800 hover:bg-green-50 rounded transition-colors" > Completar </button> )} {onDelete && ( <button onClick={() => onDelete(task.id)} disabled={isLoading} className="px-3 py-1 text-sm text-red-600 hover:text-red-800 hover:bg-red-50 rounded transition-colors" > Eliminar </button> )} </div> </div> </Card> ); }; 

