'use client'; import React from 'react'; import { LineChart, Line, AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts'; // Importar tipos del analytics import type { DailyActivity, CategoryStats } from '../../types/analytics'; // Definición de tipos para las props de los gráficos interface ChartData { name: string; value: number; [key: string]: string | number; } // Tipo flexible para productivity chart interface ProductivityData { date: string; productivity: number; } interface ChartContainerProps { children: React.ReactElement; height?: number; className?: string; } export const ChartContainer: React.FC<ChartContainerProps> = ({ children, height = 300, className = '' }) => ( <div className={`w-full ${className}`}> <ResponsiveContainer width="100%" height={height}> {children} </ResponsiveContainer> </div> ); // Componente para gráfico de líneas (actividad diaria) interface ActivityLineChartProps { data: DailyActivity[]; height?: number; } export const ActivityLineChart: React.FC<ActivityLineChartProps> = ({ data, height = 300 }) => ( <ChartContainer height={height}> <LineChart data={data}> <CartesianGrid strokeDasharray="3 3" /> <XAxis dataKey="date" /> <YAxis /> <Tooltip /> <Legend /> <Line type="monotone" dataKey="completed" stroke="#10b981" strokeWidth={2} name="Tareas Completadas" /> <Line type="monotone" dataKey="created" stroke="#3b82f6" strokeWidth={2} name="Tareas Creadas" /> </LineChart> </ChartContainer> ); // Componente para gráfico de barras (categorías) interface CategoryBarChartProps { data: CategoryStats[]; height?: number; } export const CategoryBarChart: React.FC<CategoryBarChartProps> = ({ data, height = 300 }) => ( <ChartContainer height={height}> <BarChart data={data}> <CartesianGrid strokeDasharray="3 3" /> <XAxis dataKey="categoryName" /> <YAxis /> <Tooltip /> <Legend /> <Bar dataKey="total" fill="#3b82f6" name="Total Tareas" /> <Bar dataKey="completed" fill="#10b981" name="Completadas" /> </BarChart> </ChartContainer> ); // Componente para gráfico circular (distribución de tareas) interface TaskDistributionPieChartProps { data: ChartData[]; height?: number; } const COLORS = ['#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4']; export const TaskDistributionPieChart: React.FC<TaskDistributionPieChartProps> = ({ data, height = 300 }) => ( <ChartContainer height={height}> <PieChart> <Pie data={data} cx="50%" cy="50%" labelLine={false} label={({ name, percent }) => `${name} ${((percent || 0) * 100).toFixed(0)}%`} outerRadius={80} fill="#8884d8" dataKey="value" > {data.map((entry, index) => ( <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} /> ))} </Pie> <Tooltip /> <Legend /> </PieChart> </ChartContainer> ); // Componente para gráfico de área (productividad) interface ProductivityAreaChartProps { data: ProductivityData[]; height?: number; } export const ProductivityAreaChart: React.FC<ProductivityAreaChartProps> = ({ data, height = 300 }) => ( <ChartContainer height={height}> <AreaChart data={data}> <CartesianGrid strokeDasharray="3 3" /> <XAxis dataKey="date" /> <YAxis /> <Tooltip /> <Legend /> <Area type="monotone" dataKey="productivity" stroke="#8b5cf6" fill="#8b5cf6" fillOpacity={0.6} name="Productividad" /> </AreaChart> </ChartContainer> ); // Componente de estadísticas rápidas interface StatCardProps { title: string; value: string | number; change?: number; icon?: React.ReactNode; className?: string; } export const StatCard: React.FC<StatCardProps> = ({ title, value, change, icon, className = '' }) => ( <div className={`bg-white rounded-lg shadow p-6 ${className}`}> <div className="flex items-center justify-between"> <div> <p className="text-sm font-medium text-gray-600">{title}</p> <p className="text-2xl font-bold text-gray-900">{value}</p> {change !== undefined && ( <p className={`text-sm ${change >= 0 ? 'text-green-600' : 'text-red-600'}`}> {change >= 0 ? '+' : ''}{change}% vs período anterior </p> )} </div> {icon && ( <div className="text-3xl text-gray-400"> {icon} </div> )} </div> </div> ); // Exportar todos los tipos export type { ChartData, DailyActivity, CategoryStats, ProductivityData, ActivityLineChartProps, CategoryBarChartProps, TaskDistributionPieChartProps, ProductivityAreaChartProps, StatCardProps }; 

